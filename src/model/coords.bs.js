// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var keyRe = new RegExp("^x(\\-?[0-9]+)y(\\-?[0-9]+)$");

function fromString(s) {
  var match = keyRe.exec(s);
  if (match !== null) {
    if (match.length !== 3) {
      return /* None */0;
    } else {
      var x_ns = match[1];
      var y_ns = match[2];
      if (!(x_ns == null) && !(y_ns == null)) {
        return /* Some */[/* record */[
                  /* x */Caml_format.caml_int_of_string(x_ns),
                  /* y */Caml_format.caml_int_of_string(y_ns)
                ]];
      } else {
        return /* None */0;
      }
    }
  } else {
    return /* None */0;
  }
}

function neighbours(param) {
  var y = param[/* y */1];
  var x = param[/* x */0];
  return /* :: */[
          /* record */[
            /* x */x - 1 | 0,
            /* y */y - 1 | 0
          ],
          /* :: */[
            /* record */[
              /* x */x,
              /* y */y - 1 | 0
            ],
            /* :: */[
              /* record */[
                /* x */x + 1 | 0,
                /* y */y - 1 | 0
              ],
              /* :: */[
                /* record */[
                  /* x */x - 1 | 0,
                  /* y */y
                ],
                /* :: */[
                  /* record */[
                    /* x */x + 1 | 0,
                    /* y */y
                  ],
                  /* :: */[
                    /* record */[
                      /* x */x - 1 | 0,
                      /* y */y + 1 | 0
                    ],
                    /* :: */[
                      /* record */[
                        /* x */x,
                        /* y */y + 1 | 0
                      ],
                      /* :: */[
                        /* record */[
                          /* x */x + 1 | 0,
                          /* y */y + 1 | 0
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ];
}

function toString(param) {
  return "x" + (Pervasives.string_of_int(param[/* x */0]) + ("y" + Pervasives.string_of_int(param[/* y */1])));
}

exports.keyRe      = keyRe;
exports.fromString = fromString;
exports.neighbours = neighbours;
exports.toString   = toString;
/* keyRe Not a pure module */
